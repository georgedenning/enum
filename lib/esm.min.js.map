{"version":3,"file":"esm.min.js","sources":["../src/helpers/isType.js","../src/helpers/isString.js","../src/helpers/isArray.js","../src/helpers/isNull.js","../src/helpers/isObject.js","../src/helpers/isNil.js","../src/helpers/isUndefined.js","../src/helpers/isNumber.js","../src/EnumEntry.js","../src/Enum.js"],"sourcesContent":["export default (type, value) => {\n    return typeof value === type;\n};\n","import isType from './isType.js';\n\nexport default value => isType('string', value);\n","export default value => Array.isArray(value);\n","export default value => value === null;\n","import isType from './isType.js';\nimport isArray from './isArray.js';\nimport isNull from './isNull.js';\n\nexport default value => isType('object', value) && !isArray(value) && !isNull(value);\n","import isUndefined from './isUndefined.js';\nimport isNull from './isNull.js';\n\nexport default value => isUndefined(value) || isNull(value);\n","export default value => value === undefined;\n","import isType from './isType.js';\n\nexport default value => isType('number', value);\n","import isObject from './helpers/isObject.js';\nimport isNil from './helpers/isNil.js';\nimport isString from './helpers/isString.js';\nimport isNumber from './helpers/isNumber.js';\n\nexport default class EnumEntry {\n    static _defaultOptions = {\n        ignoreCase: false\n    };\n\n    /**\n     * @param {EnumEntry|Object} entry\n     */\n    static isEnumEntry(entry) {\n        if (entry instanceof EnumEntry) {\n            return true;\n        }\n\n        if (isObject(entry) && !isNil(entry.key) && !isNil(entry.value)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param {String} key\n     * @param {Number} value\n     * @param {Object|String} options\n     */\n    constructor(key, value, options = {}) {\n        if (isNil(key) || !isString(key)) {\n            throw new TypeError('key must be of type \"string\"');\n        }\n        if (isNil(value) || !isNumber(value)) {\n            throw new TypeError('value must be of type \"number\"');\n        }\n        if (isNil(options) || !isObject(options)) {\n            throw new TypeError('options must be of type \"object\"');\n        }\n\n        this.key = key;\n        this.value = value;\n\n        this._setOptions(options);\n    }\n\n    /**\n     * @param {Object|String} options\n     */\n    _setOptions(options) {\n        this._options = options || {};\n        this._options.ignoreCase = this._options.ignoreCase || EnumEntry._defaultOptions.ignoreCase;\n    }\n\n    /**\n     * @param {EnumEntry|String|Number}\n     */\n    has(value) {\n        if (EnumEntry.isEnumEntry(value)) {\n            return this.value === value.value;\n        }\n\n        if (isString(value)) {\n            if (this._options.ignoreCase) {\n                return this.key.toLowerCase().indexOf(value.toLowerCase()) >= 0;\n            }\n            return this.key.indexOf(value) >= 0;\n        }\n\n        return this.value === value;\n    }\n\n    /**\n     * @param {EnumEntry|String|Number}\n     */\n    is(key) {\n        if (EnumEntry.isEnumEntry(key)) {\n            return this.key === key.key;\n        }\n\n        if (isString(key)) {\n            if (this._options.ignoreCase) {\n                return this.key.toLowerCase() === key.toLowerCase();\n            }\n            return this.key === key;\n        }\n\n        return this.value === key;\n    }\n\n    toString() {\n        return this.key;\n    }\n\n    toJSON() {\n        return JSON.stringify(this.key);\n    }\n\n    valueOf() {\n        return this.value;\n    }\n}\n","import isString from './helpers/isString.js';\nimport isObject from './helpers/isObject.js';\nimport isArray from './helpers/isArray.js';\nimport isNil from './helpers/isNil.js';\n\nimport EnumEntry from './EnumEntry.js';\n\nexport default class Enum {\n    static _defaultOptions = {\n        ignoreCase: false\n    };\n\n    /**\n     * @param {String} key\n     */\n    static register(key = 'Enum') {\n        if (typeof global !== 'undefined' && !global[key]) {\n            global[key] = Enum;\n        } else if (typeof window !== 'undefined' && !window[key]) {\n            window[key] = Enum;\n        }\n    }\n\n    /**\n     * @param {Array|Object} entries\n     * @param {Object|String} options\n     */\n    constructor(entries, options = {}) {\n        if (isNil(entries) || (!isObject(entries) && !isArray(entries))) {\n            throw new TypeError('entries must be of type \"object\" or \"array\"');\n        }\n\n        if (isNil(options) || (!isObject(options) && !isString(options))) {\n            throw new TypeError('options must be of type \"object\"');\n        }\n\n        this._setOptions(options);\n        this._setEntries(entries);\n    }\n\n    /**\n     * @param {Object|String} options\n     */\n    _setOptions(options) {\n        if (isString(options)) {\n            options = { name: options };\n        }\n\n        this._options = options || {};\n        this._options.ignoreCase = this._options.ignoreCase || Enum._defaultOptions.ignoreCase;\n\n        if (this._options.name) {\n            this.name = this._options.name;\n        }\n    }\n\n    /**\n     * @param {Array|Object} entries\n     */\n    _setEntries(entries) {\n        this.enums = [];\n\n        if (isArray(entries)) {\n            const entriesArray = entries;\n\n            entries = entriesArray.reduce((result, entry, index) => {\n                result[entry] = index;\n                return result;\n            }, {});\n        }\n\n        this._entries = entries;\n\n        for (const entry in this._entries) {\n            this[entry] = new EnumEntry(entry, this._entries[entry], { ignoreCase: this._options.ignoreCase });\n            this.enums.push(this[entry]);\n        }\n    }\n\n    /**\n     * @param {EnumEntry|String|Number} entries\n     */\n    get(key) {\n        if (isNil(key)) {\n            return;\n        }\n\n        if (EnumEntry.isEnumEntry(key)) {\n            if (key.key in this) {\n                return key;\n            } else {\n                throw new ReferenceError(`\"${key.key}\" is not a valid enum entry key`);\n            }\n        }\n\n        if (isString(key)) {\n            let enums = this.enums;\n\n            if (this._options.ignoreCase) {\n                enums = this.getLowerCaseEnums();\n                key = key.toLowerCase();\n            }\n\n            if (!(key in this)) {\n                throw new ReferenceError(`\"${key}\" is not a valid enum entry key`);\n            }\n\n            return enums.find(entry => entry.key === key);\n        }\n\n        if (!this.enums.map(entry => entry.value).includes(key)) {\n            throw new ReferenceError(`\"${key}\" is not a valid enum entry value`);\n        }\n\n        return this.enums.find(entry => entry.value === key);\n    }\n\n    /**\n     * @param {EnumEntry|String|Number} value\n     */\n    getKey(value) {\n        const entry = this.get(value);\n\n        if (!entry) {\n            throw new ReferenceError(`entry not found`);\n        }\n\n        return entry.key;\n    }\n\n    /**\n     * @param {EnumEntry|String|Number} value\n     */\n    getValue(value) {\n        const entry = this.get(value);\n\n        if (!entry) {\n            throw new ReferenceError(`entry not found`);\n        }\n\n        return entry.value;\n    }\n\n    getLowerCaseEnums() {\n        return this.enums.map(entry => {\n            return { ...entry, key: entry.key.toLowerCase() };\n        });\n    }\n\n    toJSON() {\n        return JSON.stringify(this._entries);\n    }\n\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.enums.length) {\n                    return { value: this.enums[index++], done: false };\n                } else {\n                    return { done: true };\n                }\n            }\n        };\n    }\n}\n"],"names":["isType","type","value","_typeof","isString","isArray","Array","isNull","isObject","isNil","undefined","isUndefined","isNumber","EnumEntry","key","options","_classCallCheck","this","TypeError","_setOptions","_options","ignoreCase","_defaultOptions","isEnumEntry","toLowerCase","indexOf","JSON","stringify","entry","Symbol","iterator","Enum","entries","_setEntries","name","enums","reduce","result","index","_entries","push","ReferenceError","concat","getLowerCaseEnums","find","map","includes","get","_objectSpread","_this","next","length","done","global","window"],"mappings":"6wCAAA,MAAAA,EAAA,SAAgBC,EAAMC,GAClB,OAAOC,EAAOD,KAAUD,GCC5BG,EAAA,SAAeF,GAAK,OAAIF,EAAO,SAAUE,ICFzCG,EAAA,SAAeH,GAAK,OAAII,MAAMD,QAAQH,ICAtCK,EAAA,SAAeL,GAAK,OAAc,OAAVA,GCIxBM,EAAA,SAAeN,GAAK,OAAIF,EAAO,SAAUE,KAAWG,EAAQH,KAAWK,EAAOL,ICD9EO,EAAA,SAAeP,GAAK,OCHpB,SAAeA,GAAK,YAAcQ,IAAVR,EDGAS,CAAYT,IAAUK,EAAOL,IEDrDU,EAAA,SAAeV,GAAK,OAAIF,EAAO,SAAUE,ICGpBW,aAyBjB,SAAYC,EAAAA,EAAKZ,GAAqB,IAAda,yDAAU,GAC9B,GADkCC,EAAAC,KAAAJ,GAC9BJ,EAAMK,KAASV,EAASU,GACxB,MAAM,IAAII,UAAU,gCAExB,GAAIT,EAAMP,KAAWU,EAASV,GAC1B,MAAM,IAAIgB,UAAU,kCAExB,GAAIT,EAAMM,KAAaP,EAASO,GAC5B,MAAM,IAAIG,UAAU,oCAGxBD,KAAKH,IAAMA,EACXG,KAAKf,MAAQA,EAEbe,KAAKE,YAAYJ,kCAMrBb,MAAA,SAAYa,GACRE,KAAKG,SAAWL,GAAW,GAC3BE,KAAKG,SAASC,WAAaJ,KAAKG,SAASC,YAAcR,EAAUS,gBAAgBD,wBAMrFnB,MAAA,SAAIA,GACA,OAAIW,EAAUU,YAAYrB,GACfe,KAAKf,QAAUA,EAAMA,MAG5BE,EAASF,GACLe,KAAKG,SAASC,WACPJ,KAAKH,IAAIU,cAAcC,QAAQvB,EAAMsB,gBAAkB,EAE3DP,KAAKH,IAAIW,QAAQvB,IAAU,EAG/Be,KAAKf,QAAUA,cAM1BA,MAAA,SAAGY,GACC,OAAID,EAAUU,YAAYT,GACfG,KAAKH,MAAQA,EAAIA,IAGxBV,EAASU,GACLG,KAAKG,SAASC,WACPJ,KAAKH,IAAIU,gBAAkBV,EAAIU,cAEnCP,KAAKH,MAAQA,EAGjBG,KAAKf,QAAUY,0BAG1B,WACI,OAAOG,KAAKH,0BAGhB,WACI,OAAOY,KAAKC,UAAUV,KAAKH,4BAG/B,WACI,OAAOG,KAAKf,mCAvFhB,SAAmB0B,GACf,OAAIA,aAAiBf,MAIjBL,EAASoB,IAAWnB,EAAMmB,EAAMd,MAASL,EAAMmB,EAAM1B,iBAb5CW,EAAAA,EACQ,kBAAA,CACrBQ,YAAY,ICkJfQ,EAAAA,OAAOC,aAlJSC,aAoBjB,SAAAA,EAAYC,GAAuB,IAAdjB,yDAAU,GAC3B,GAD+BC,EAAAC,KAAAc,GAC3BtB,EAAMuB,KAAcxB,EAASwB,KAAa3B,EAAQ2B,GAClD,MAAM,IAAId,UAAU,+CAGxB,GAAIT,EAAMM,KAAcP,EAASO,KAAaX,EAASW,GACnD,MAAM,IAAIG,UAAU,oCAGxBD,KAAKE,YAAYJ,GACjBE,KAAKgB,YAAYD,kCAMrB9B,MAAA,SAAYa,GACJX,EAASW,KACTA,EAAU,CAAEmB,KAAMnB,IAGtBE,KAAKG,SAAWL,GAAW,GAC3BE,KAAKG,SAASC,WAAaJ,KAAKG,SAASC,YAAcU,EAAKT,gBAAgBD,WAExEJ,KAAKG,SAASc,OACdjB,KAAKiB,KAAOjB,KAAKG,SAASc,2BAOlChC,MAAA,SAAY8B,IACRf,KAAKkB,MAAQ,GAET9B,EAAQ2B,MAGRA,EAFqBA,EAEEI,QAAO,SAACC,EAAQT,EAAOU,GAE1C,OADAD,EAAOT,GAASU,EACTD,IACR,KAKP,IAAK,IAAMT,KAFXX,KAAKsB,SAAWP,EAEIf,KAAKsB,SACrBtB,KAAKW,GAAS,IAAIf,EAAUe,EAAOX,KAAKsB,SAASX,GAAQ,CAAEP,WAAYJ,KAAKG,SAASC,aACrFJ,KAAKkB,MAAMK,KAAKvB,KAAKW,iBAO7B1B,MAAA,SAAIY,GACA,IAAIL,EAAMK,GAAV,CAIA,GAAID,EAAUU,YAAYT,GAAM,CAC5B,GAAIA,EAAIA,OAAOG,KACX,OAAOH,EAEP,MAAM,IAAI2B,eAAJ,IAAAC,OAAuB5B,EAAIA,IAAjC,oCAIR,GAAIV,EAASU,GAAM,CACf,IAAIqB,EAAQlB,KAAKkB,MAOjB,GALIlB,KAAKG,SAASC,aACdc,EAAQlB,KAAK0B,oBACb7B,EAAMA,EAAIU,iBAGRV,KAAOG,MACT,MAAM,IAAIwB,eAAmB3B,IAAAA,OAAAA,EAA7B,oCAGJ,OAAOqB,EAAMS,MAAK,SAAAhB,GAAK,OAAIA,EAAMd,MAAQA,KAG7C,IAAKG,KAAKkB,MAAMU,KAAI,SAAAjB,GAAK,OAAIA,EAAM1B,SAAO4C,SAAShC,GAC/C,MAAM,IAAI2B,eAAmB3B,IAAAA,OAAAA,EAA7B,sCAGJ,OAAOG,KAAKkB,MAAMS,MAAK,SAAAhB,GAAK,OAAIA,EAAM1B,QAAUY,sBAMpDZ,MAAA,SAAOA,GACH,IAAM0B,EAAQX,KAAK8B,IAAI7C,GAEvB,IAAK0B,EACD,MAAM,IAAIa,eAAV,mBAGJ,OAAOb,EAAMd,sBAMjBZ,MAAA,SAASA,GACL,IAAM0B,EAAQX,KAAK8B,IAAI7C,GAEvB,IAAK0B,EACD,MAAM,IAAIa,eAAV,mBAGJ,OAAOb,EAAM1B,uCAGjB,WACI,OAAOe,KAAKkB,MAAMU,KAAI,SAAAjB,GAClB,OAAAoB,EAAAA,EAAA,GAAYpB,GAAZ,GAAA,CAAmBd,IAAKc,EAAMd,IAAIU,yCAI1C,WACI,OAAOE,KAAKC,UAAUV,KAAKsB,yBAG/B,WAAoB,IAAAU,EAAAhC,KACZqB,EAAQ,EACZ,MAAO,CACHY,KAAM,WACF,OAAIZ,EAAQW,EAAKd,MAAMgB,OACZ,CAAEjD,MAAO+C,EAAKd,MAAMG,KAAUc,MAAM,GAEpC,CAAEA,MAAM,+BAjJ/B,WAA8B,IAAdtC,yDAAM,OACI,oBAAXuC,QAA2BA,OAAOvC,GAEhB,oBAAXwC,QAA2BA,OAAOxC,KAChDwC,OAAOxC,GAAOiB,GAFdsB,OAAOvC,GAAOiB,WAVLA,EAAAA,EACQ,kBAAA,CACrBV,YAAY"}